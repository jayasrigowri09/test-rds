


AWSTemplateFormatVersion: '2010-09-09'
Description: Create Ec2 Machine and vpc

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName

  InstanceType:
    Type: String
    Default: t2.micro
  
  ImageId:
    Type: String
    Default: ami-0dfcb1ef8550277af
    
  MyAvailabilityZone:
    Description: Select the AZ
    Type: String
    Default: us-east-1b

  VpcCIDR:
    Type: String
    Description: Enter the IP range.
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Type: String
    Description: choose publicsubnetcidr
    Default: 10.0.0.0/24

  PrivateSubnetCIDR1:
    Type: String
    Description: Please enter the IP address range for the VPC subnet
    Default: 10.0.1.0/24

  PrivateSubnetCIDR2:
    Type: String
    Description: Please enter the IP address range for the VPC subnet
    Default: 10.0.2.0/24

  DBInstanceIdentifier:
    Type: String
    Default: "webapp-db"

  DBUsername:
    Type: String
    NoEcho: "true"
    Description: Username for Mysql database access
    Default: "Mysqldb"
  DBPassword:
    NoEcho: "true"
    Description: Password Mysql database access
    Type: String
    MinLength: "8"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: Must contain only alphanumeric characters.
    
Resources:
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref WebAppSecurityGroup
      AvailabilityZone: !Ref MyAvailabilityZone
      SubnetId: !Ref PublicSubnet1

      Tags:
        - Key: Name
          Value: Demoec2  

  WebAppDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      VPCSecurityGroups:
        - !GetAtt DBEC2SecurityGroup.GroupId
      DBSubnetGroup:
        Ref: WebAppDBSubnetGroup
      AllocatedStorage: "5"
      DBInstanceClass: db.t2.small
      Engine: MYSQL
      EngineVersion: 8.0.28
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      Tags:
        - Key: Name
          Value: MyDBInstance


  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow Database inbound traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupName:
            Ref: WebAppSecurityGroup
      Tags:
        - Key: Name
          Value: DBEC2-SG

  WebAppVpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      Tags:
        - Key: Name
          Value: RDSDEMOVPC 

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Test-IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref WebAppVpc

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select [ 1, !GetAZs ]
      VpcId: !Ref WebAppVpc
      Tags:
         - Key: Name
           Value: Public-TestSubnet1

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref WebAppVpc
      Tags:
        - Key: Name
          Value: Public-RouteTable

  Route: 
    DependsOn: InternetGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable  
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway 

  PublicSubnet1RoutetableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId:  !Ref PublicSubnet1


  AZANatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGateway
    Properties:
      Domain: WebAppVpc

  AZANatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - AZANatGatewayEIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet1

  PrivateSubnetRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: WebAppVpc
      Tags:
      - Key: Name
        Value: Private-Subnet-RT

  PrivateSubnetRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: WebAppVpc
      Tags:
      - Key: Name
        Value: Private-Subnet-RT2
          
  PrivateSubnetRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: AZANatGateway

  PrivateSubnetRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateSubnetRouteTableAssociation2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: AZANatGateway

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-1c
      VpcId:
        Ref: WebAppVpc
      CidrBlock:
        Ref: PrivateSubnetCIDR1
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: Private-Subnet


  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-1f
      VpcId:
        Ref: WebAppVpc
      CidrBlock:
        Ref: PrivateSubnetCIDR2
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: Private-Subnet2
        

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateSubnetRouteTable1
      SubnetId:
        Ref: PrivateSubnet1

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateSubnetRouteTable2
      SubnetId:
        Ref: PrivateSubnet2

  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      
      GroupDescription: My SG with port 22 and 8080 inbound
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080          
          ToPort: 8080
          CidrIp: 0.0.0.0/0

      Tags:
        - Key: Name
          Value: EC2-SG
      VpcId: !Ref WebAppVpc

  WebAppDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Subnet for rds
      SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
      Tags:
        - Key: Name
          Value: Rds-DBSubnetGroup

 

 

